
4x3_keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000434  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080005cc  080005cc  000105cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080005fc  080005fc  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080005fc  080005fc  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005fc  080005fc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005fc  080005fc  000105fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000600  08000600  00010600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000604  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000608  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000608  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001422  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000546  00000000  00000000  00021456  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f0  00000000  00000000  000219a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001a8  00000000  00000000  00021b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013bfb  00000000  00000000  00021d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001ffc  00000000  00000000  00035933  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e740  00000000  00000000  0003792f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b606f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000608  00000000  00000000  000b60c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080005b4 	.word	0x080005b4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	080005b4 	.word	0x080005b4

080001d8 <main>:
char keypad_getkey(void);
void LED_init(void);
void LED_blink(int value);

int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
	unsigned char key;
	keypad_init();
 80001de:	f000 f80f 	bl	8000200 <keypad_init>
	LED_init();
 80001e2:	f000 f8c9 	bl	8000378 <LED_init>
	while(1)
	{
		key = keypad_getkey(); 					/* read the keypad */
 80001e6:	f000 f825 	bl	8000234 <keypad_getkey>
 80001ea:	4603      	mov	r3, r0
 80001ec:	71fb      	strb	r3, [r7, #7]
		if (key != 0)
 80001ee:	79fb      	ldrb	r3, [r7, #7]
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d0f8      	beq.n	80001e6 <main+0xe>
			LED_blink(key); 					/* set LEDs according to the key code */
 80001f4:	79fb      	ldrb	r3, [r7, #7]
 80001f6:	4618      	mov	r0, r3
 80001f8:	f000 f8dc 	bl	80003b4 <LED_blink>
		key = keypad_getkey(); 					/* read the keypad */
 80001fc:	e7f3      	b.n	80001e6 <main+0xe>
	...

08000200 <keypad_init>:

/* this function initializes PC0-2 (column) and PC4-7 (row).
* The column pins need to have the pull-up resistors enabled. */

void keypad_init(void)
{
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= 0x4; 						/* enable GPIOC clock */
 8000204:	4b09      	ldr	r3, [pc, #36]	; (800022c <keypad_init+0x2c>)
 8000206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000208:	4a08      	ldr	r2, [pc, #32]	; (800022c <keypad_init+0x2c>)
 800020a:	f043 0304 	orr.w	r3, r3, #4
 800020e:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOC->MODER &= ~0x3F; 				/* clear pin mode to input */
 8000210:	4b07      	ldr	r3, [pc, #28]	; (8000230 <keypad_init+0x30>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a06      	ldr	r2, [pc, #24]	; (8000230 <keypad_init+0x30>)
 8000216:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800021a:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR = 0x15; 					/* enable pull up resistors for column pins */
 800021c:	4b04      	ldr	r3, [pc, #16]	; (8000230 <keypad_init+0x30>)
 800021e:	2215      	movs	r2, #21
 8000220:	60da      	str	r2, [r3, #12]
}
 8000222:	bf00      	nop
 8000224:	46bd      	mov	sp, r7
 8000226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022a:	4770      	bx	lr
 800022c:	40023800 	.word	0x40023800
 8000230:	40020800 	.word	0x40020800

08000234 <keypad_getkey>:

char keypad_getkey(void)
{
 8000234:	b590      	push	{r4, r7, lr}
 8000236:	b08f      	sub	sp, #60	; 0x3c
 8000238:	af00      	add	r7, sp, #0
	int row, col;
	const int row_mode[] = {(1<<8),(1<<10),(1<<12),(1<<14)}; 				/* one row is output */
 800023a:	4b4b      	ldr	r3, [pc, #300]	; (8000368 <keypad_getkey+0x134>)
 800023c:	f107 0420 	add.w	r4, r7, #32
 8000240:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000242:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	const int row_low[] = {(1<<20),(1<<21),(1<<22),(1<<23)}; 				/* one row is low */
 8000246:	4b49      	ldr	r3, [pc, #292]	; (800036c <keypad_getkey+0x138>)
 8000248:	f107 0410 	add.w	r4, r7, #16
 800024c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800024e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	const int row_high[] = {(1<<4),(1<<5),(1<<6),(1<<7)}; 				/* one row is high */
 8000252:	4b47      	ldr	r3, [pc, #284]	; (8000370 <keypad_getkey+0x13c>)
 8000254:	463c      	mov	r4, r7
 8000256:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000258:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* check to see any key pressed */
	GPIOC->MODER = 0x5500; 								/* make all row pins output */
 800025c:	4b45      	ldr	r3, [pc, #276]	; (8000374 <keypad_getkey+0x140>)
 800025e:	f44f 42aa 	mov.w	r2, #21760	; 0x5500
 8000262:	601a      	str	r2, [r3, #0]
	GPIOC->BSRR = 0xF00000; 								/* drive all row pins low */
 8000264:	4b43      	ldr	r3, [pc, #268]	; (8000374 <keypad_getkey+0x140>)
 8000266:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 800026a:	619a      	str	r2, [r3, #24]
	delay(); 												/* wait for signals to settle */
 800026c:	f000 f8d4 	bl	8000418 <delay>
	col = GPIOC->IDR & 0x7; 								/* read all column pins */
 8000270:	4b40      	ldr	r3, [pc, #256]	; (8000374 <keypad_getkey+0x140>)
 8000272:	691b      	ldr	r3, [r3, #16]
 8000274:	f003 0307 	and.w	r3, r3, #7
 8000278:	633b      	str	r3, [r7, #48]	; 0x30
	GPIOC->MODER &= ~0xFF00; 							/* disable all row pins drive */
 800027a:	4b3e      	ldr	r3, [pc, #248]	; (8000374 <keypad_getkey+0x140>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4a3d      	ldr	r2, [pc, #244]	; (8000374 <keypad_getkey+0x140>)
 8000280:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000284:	6013      	str	r3, [r2, #0]
	if (col == 0x7) 										/* if all columns are high */
 8000286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000288:	2b07      	cmp	r3, #7
 800028a:	d101      	bne.n	8000290 <keypad_getkey+0x5c>
		return 0; 											/* no key pressed */
 800028c:	2300      	movs	r3, #0
 800028e:	e067      	b.n	8000360 <keypad_getkey+0x12c>

	/* If a key is pressed, it gets here to find out which key.
* It activates one row at a time and read the input to see which column is active. */

	for (row = 0; row < 4; row++)
 8000290:	2300      	movs	r3, #0
 8000292:	637b      	str	r3, [r7, #52]	; 0x34
 8000294:	e02d      	b.n	80002f2 <keypad_getkey+0xbe>
	{
		GPIOC->MODER &= ~0xFF00; 						/* disable all row pins drive */
 8000296:	4b37      	ldr	r3, [pc, #220]	; (8000374 <keypad_getkey+0x140>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	4a36      	ldr	r2, [pc, #216]	; (8000374 <keypad_getkey+0x140>)
 800029c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80002a0:	6013      	str	r3, [r2, #0]
		GPIOC->MODER |= row_mode[row]; 						/* enable one row at a time */
 80002a2:	4b34      	ldr	r3, [pc, #208]	; (8000374 <keypad_getkey+0x140>)
 80002a4:	681a      	ldr	r2, [r3, #0]
 80002a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80002a8:	009b      	lsls	r3, r3, #2
 80002aa:	3338      	adds	r3, #56	; 0x38
 80002ac:	443b      	add	r3, r7
 80002ae:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80002b2:	4930      	ldr	r1, [pc, #192]	; (8000374 <keypad_getkey+0x140>)
 80002b4:	4313      	orrs	r3, r2
 80002b6:	600b      	str	r3, [r1, #0]
		GPIOC->BSRR = row_low[row]; 						/* drive the active row low */
 80002b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80002ba:	009b      	lsls	r3, r3, #2
 80002bc:	3338      	adds	r3, #56	; 0x38
 80002be:	443b      	add	r3, r7
 80002c0:	f853 2c28 	ldr.w	r2, [r3, #-40]
 80002c4:	4b2b      	ldr	r3, [pc, #172]	; (8000374 <keypad_getkey+0x140>)
 80002c6:	619a      	str	r2, [r3, #24]
		delay(); 											/* wait for signal to settle */
 80002c8:	f000 f8a6 	bl	8000418 <delay>
		col = GPIOC->IDR & 0x7; 							/* read all columns */
 80002cc:	4b29      	ldr	r3, [pc, #164]	; (8000374 <keypad_getkey+0x140>)
 80002ce:	691b      	ldr	r3, [r3, #16]
 80002d0:	f003 0307 	and.w	r3, r3, #7
 80002d4:	633b      	str	r3, [r7, #48]	; 0x30
		GPIOC->BSRR = row_high[row]; 						/* drive the active row high */
 80002d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80002d8:	009b      	lsls	r3, r3, #2
 80002da:	3338      	adds	r3, #56	; 0x38
 80002dc:	443b      	add	r3, r7
 80002de:	f853 2c38 	ldr.w	r2, [r3, #-56]
 80002e2:	4b24      	ldr	r3, [pc, #144]	; (8000374 <keypad_getkey+0x140>)
 80002e4:	619a      	str	r2, [r3, #24]
		if (col != 0x7)
 80002e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80002e8:	2b07      	cmp	r3, #7
 80002ea:	d106      	bne.n	80002fa <keypad_getkey+0xc6>
	for (row = 0; row < 4; row++)
 80002ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80002ee:	3301      	adds	r3, #1
 80002f0:	637b      	str	r3, [r7, #52]	; 0x34
 80002f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80002f4:	2b03      	cmp	r3, #3
 80002f6:	ddce      	ble.n	8000296 <keypad_getkey+0x62>
 80002f8:	e000      	b.n	80002fc <keypad_getkey+0xc8>
			break; 											/* if one of the input is low, some key is pressed. */
 80002fa:	bf00      	nop
	}
	GPIOC->BSRR = 0xF0; 								/* drive all rows high before disable them */
 80002fc:	4b1d      	ldr	r3, [pc, #116]	; (8000374 <keypad_getkey+0x140>)
 80002fe:	22f0      	movs	r2, #240	; 0xf0
 8000300:	619a      	str	r2, [r3, #24]
	GPIOC->MODER &= ~0xFF00; 							/* disable all rows */
 8000302:	4b1c      	ldr	r3, [pc, #112]	; (8000374 <keypad_getkey+0x140>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	4a1b      	ldr	r2, [pc, #108]	; (8000374 <keypad_getkey+0x140>)
 8000308:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800030c:	6013      	str	r3, [r2, #0]
	if (row == 4)
 800030e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000310:	2b04      	cmp	r3, #4
 8000312:	d101      	bne.n	8000318 <keypad_getkey+0xe4>
		return 0; 											/* if we get here, no key is pressed */
 8000314:	2300      	movs	r3, #0
 8000316:	e023      	b.n	8000360 <keypad_getkey+0x12c>

	/* gets here when one of the rows has key pressed, check which column it is */
	if (col == 0x6)
 8000318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800031a:	2b06      	cmp	r3, #6
 800031c:	d108      	bne.n	8000330 <keypad_getkey+0xfc>
		return row * 3 + 1; 								/* key in column 0 */
 800031e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000320:	b2db      	uxtb	r3, r3
 8000322:	461a      	mov	r2, r3
 8000324:	0052      	lsls	r2, r2, #1
 8000326:	4413      	add	r3, r2
 8000328:	b2db      	uxtb	r3, r3
 800032a:	3301      	adds	r3, #1
 800032c:	b2db      	uxtb	r3, r3
 800032e:	e017      	b.n	8000360 <keypad_getkey+0x12c>
	if (col == 0x5)
 8000330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000332:	2b05      	cmp	r3, #5
 8000334:	d108      	bne.n	8000348 <keypad_getkey+0x114>
		return row * 3 + 2; 								/* key in column1 */
 8000336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000338:	b2db      	uxtb	r3, r3
 800033a:	461a      	mov	r2, r3
 800033c:	0052      	lsls	r2, r2, #1
 800033e:	4413      	add	r3, r2
 8000340:	b2db      	uxtb	r3, r3
 8000342:	3302      	adds	r3, #2
 8000344:	b2db      	uxtb	r3, r3
 8000346:	e00b      	b.n	8000360 <keypad_getkey+0x12c>
	if (col == 0x3)
 8000348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800034a:	2b03      	cmp	r3, #3
 800034c:	d107      	bne.n	800035e <keypad_getkey+0x12a>
		return row * 3 + 3; 								/* key in column 2 */
 800034e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000350:	3301      	adds	r3, #1
 8000352:	b2db      	uxtb	r3, r3
 8000354:	461a      	mov	r2, r3
 8000356:	0052      	lsls	r2, r2, #1
 8000358:	4413      	add	r3, r2
 800035a:	b2db      	uxtb	r3, r3
 800035c:	e000      	b.n	8000360 <keypad_getkey+0x12c>

	return 0; /* just to be safe */
 800035e:	2300      	movs	r3, #0
}
 8000360:	4618      	mov	r0, r3
 8000362:	373c      	adds	r7, #60	; 0x3c
 8000364:	46bd      	mov	sp, r7
 8000366:	bd90      	pop	{r4, r7, pc}
 8000368:	080005cc 	.word	0x080005cc
 800036c:	080005dc 	.word	0x080005dc
 8000370:	080005ec 	.word	0x080005ec
 8000374:	40020800 	.word	0x40020800

08000378 <LED_init>:

void LED_init(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
	// enable PA5 for green LED
	RCC->AHB1ENR |= 0x1; 										/* enable GPIOA clock */
 800037c:	4b0b      	ldr	r3, [pc, #44]	; (80003ac <LED_init+0x34>)
 800037e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000380:	4a0a      	ldr	r2, [pc, #40]	; (80003ac <LED_init+0x34>)
 8000382:	f043 0301 	orr.w	r3, r3, #1
 8000386:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER &= ~(3<<10); 			/* clear pin mode */
 8000388:	4b09      	ldr	r3, [pc, #36]	; (80003b0 <LED_init+0x38>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a08      	ldr	r2, [pc, #32]	; (80003b0 <LED_init+0x38>)
 800038e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000392:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1<<10); 			/* set pin output mode */
 8000394:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <LED_init+0x38>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a05      	ldr	r2, [pc, #20]	; (80003b0 <LED_init+0x38>)
 800039a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800039e:	6013      	str	r3, [r2, #0]
}
 80003a0:	bf00      	nop
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	40023800 	.word	0x40023800
 80003b0:	40020000 	.word	0x40020000

080003b4 <LED_blink>:

/*turn on or off the LEDs according to the value */

void LED_blink(int value)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
	value %= 13; 										/* cap the max count at 12 */
 80003bc:	687a      	ldr	r2, [r7, #4]
 80003be:	4b14      	ldr	r3, [pc, #80]	; (8000410 <LED_blink+0x5c>)
 80003c0:	fb83 1302 	smull	r1, r3, r3, r2
 80003c4:	1099      	asrs	r1, r3, #2
 80003c6:	17d3      	asrs	r3, r2, #31
 80003c8:	1ac9      	subs	r1, r1, r3
 80003ca:	460b      	mov	r3, r1
 80003cc:	005b      	lsls	r3, r3, #1
 80003ce:	440b      	add	r3, r1
 80003d0:	009b      	lsls	r3, r3, #2
 80003d2:	440b      	add	r3, r1
 80003d4:	1ad3      	subs	r3, r2, r3
 80003d6:	607b      	str	r3, [r7, #4]
	for (; value > 0; value--)
 80003d8:	e00f      	b.n	80003fa <LED_blink+0x46>
	{
		GPIOA->BSRR = (1<<5); 						/* turn on LED */
 80003da:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <LED_blink+0x60>)
 80003dc:	2220      	movs	r2, #32
 80003de:	619a      	str	r2, [r3, #24]
		delayMs(200);
 80003e0:	20c8      	movs	r0, #200	; 0xc8
 80003e2:	f000 f82c 	bl	800043e <delayMs>
		GPIOA->BSRR = (1<<21); 						/* turn off LED */
 80003e6:	4b0b      	ldr	r3, [pc, #44]	; (8000414 <LED_blink+0x60>)
 80003e8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80003ec:	619a      	str	r2, [r3, #24]
		delayMs(200);
 80003ee:	20c8      	movs	r0, #200	; 0xc8
 80003f0:	f000 f825 	bl	800043e <delayMs>
	for (; value > 0; value--)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	3b01      	subs	r3, #1
 80003f8:	607b      	str	r3, [r7, #4]
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	dcec      	bgt.n	80003da <LED_blink+0x26>
	}
	delayMs(200);
 8000400:	20c8      	movs	r0, #200	; 0xc8
 8000402:	f000 f81c 	bl	800043e <delayMs>
}
 8000406:	bf00      	nop
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	4ec4ec4f 	.word	0x4ec4ec4f
 8000414:	40020000 	.word	0x40020000

08000418 <delay>:

/* make a small delay */
void delay(void)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
	int i;
	for (i = 0; i < 20; i++) ;
 800041e:	2300      	movs	r3, #0
 8000420:	607b      	str	r3, [r7, #4]
 8000422:	e002      	b.n	800042a <delay+0x12>
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	3301      	adds	r3, #1
 8000428:	607b      	str	r3, [r7, #4]
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	2b13      	cmp	r3, #19
 800042e:	ddf9      	ble.n	8000424 <delay+0xc>
}
 8000430:	bf00      	nop
 8000432:	bf00      	nop
 8000434:	370c      	adds	r7, #12
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr

0800043e <delayMs>:


void delayMs(int n)
{
 800043e:	b480      	push	{r7}
 8000440:	b085      	sub	sp, #20
 8000442:	af00      	add	r7, sp, #0
 8000444:	6078      	str	r0, [r7, #4]
	int i;
	for (; n > 0; n--)
 8000446:	e00d      	b.n	8000464 <delayMs+0x26>
		for (i = 0; i < 3195; i++) ;
 8000448:	2300      	movs	r3, #0
 800044a:	60fb      	str	r3, [r7, #12]
 800044c:	e002      	b.n	8000454 <delayMs+0x16>
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	3301      	adds	r3, #1
 8000452:	60fb      	str	r3, [r7, #12]
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	f640 427a 	movw	r2, #3194	; 0xc7a
 800045a:	4293      	cmp	r3, r2
 800045c:	ddf7      	ble.n	800044e <delayMs+0x10>
	for (; n > 0; n--)
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	3b01      	subs	r3, #1
 8000462:	607b      	str	r3, [r7, #4]
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	2b00      	cmp	r3, #0
 8000468:	dcee      	bgt.n	8000448 <delayMs+0xa>
}
 800046a:	bf00      	nop
 800046c:	bf00      	nop
 800046e:	3714      	adds	r7, #20
 8000470:	46bd      	mov	sp, r7
 8000472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000476:	4770      	bx	lr

08000478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800047c:	e7fe      	b.n	800047c <NMI_Handler+0x4>

0800047e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800047e:	b480      	push	{r7}
 8000480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000482:	e7fe      	b.n	8000482 <HardFault_Handler+0x4>

08000484 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000488:	e7fe      	b.n	8000488 <MemManage_Handler+0x4>

0800048a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800048a:	b480      	push	{r7}
 800048c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800048e:	e7fe      	b.n	800048e <BusFault_Handler+0x4>

08000490 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000494:	e7fe      	b.n	8000494 <UsageFault_Handler+0x4>

08000496 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000496:	b480      	push	{r7}
 8000498:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800049a:	bf00      	nop
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr

080004a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004a8:	bf00      	nop
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr

080004b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004b2:	b480      	push	{r7}
 80004b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004b6:	bf00      	nop
 80004b8:	46bd      	mov	sp, r7
 80004ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004be:	4770      	bx	lr

080004c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004c4:	f000 f83e 	bl	8000544 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004c8:	bf00      	nop
 80004ca:	bd80      	pop	{r7, pc}

080004cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004d0:	4b06      	ldr	r3, [pc, #24]	; (80004ec <SystemInit+0x20>)
 80004d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004d6:	4a05      	ldr	r2, [pc, #20]	; (80004ec <SystemInit+0x20>)
 80004d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	e000ed00 	.word	0xe000ed00

080004f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80004f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000528 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004f4:	480d      	ldr	r0, [pc, #52]	; (800052c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80004f6:	490e      	ldr	r1, [pc, #56]	; (8000530 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80004f8:	4a0e      	ldr	r2, [pc, #56]	; (8000534 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004fc:	e002      	b.n	8000504 <LoopCopyDataInit>

080004fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000502:	3304      	adds	r3, #4

08000504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000508:	d3f9      	bcc.n	80004fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800050a:	4a0b      	ldr	r2, [pc, #44]	; (8000538 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800050c:	4c0b      	ldr	r4, [pc, #44]	; (800053c <LoopFillZerobss+0x26>)
  movs r3, #0
 800050e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000510:	e001      	b.n	8000516 <LoopFillZerobss>

08000512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000514:	3204      	adds	r2, #4

08000516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000518:	d3fb      	bcc.n	8000512 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800051a:	f7ff ffd7 	bl	80004cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800051e:	f000 f825 	bl	800056c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000522:	f7ff fe59 	bl	80001d8 <main>
  bx  lr    
 8000526:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000528:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800052c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000530:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000534:	08000604 	.word	0x08000604
  ldr r2, =_sbss
 8000538:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800053c:	20000024 	.word	0x20000024

08000540 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000540:	e7fe      	b.n	8000540 <ADC_IRQHandler>
	...

08000544 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000548:	4b06      	ldr	r3, [pc, #24]	; (8000564 <HAL_IncTick+0x20>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	461a      	mov	r2, r3
 800054e:	4b06      	ldr	r3, [pc, #24]	; (8000568 <HAL_IncTick+0x24>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4413      	add	r3, r2
 8000554:	4a04      	ldr	r2, [pc, #16]	; (8000568 <HAL_IncTick+0x24>)
 8000556:	6013      	str	r3, [r2, #0]
}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	20000000 	.word	0x20000000
 8000568:	20000020 	.word	0x20000020

0800056c <__libc_init_array>:
 800056c:	b570      	push	{r4, r5, r6, lr}
 800056e:	4d0d      	ldr	r5, [pc, #52]	; (80005a4 <__libc_init_array+0x38>)
 8000570:	4c0d      	ldr	r4, [pc, #52]	; (80005a8 <__libc_init_array+0x3c>)
 8000572:	1b64      	subs	r4, r4, r5
 8000574:	10a4      	asrs	r4, r4, #2
 8000576:	2600      	movs	r6, #0
 8000578:	42a6      	cmp	r6, r4
 800057a:	d109      	bne.n	8000590 <__libc_init_array+0x24>
 800057c:	4d0b      	ldr	r5, [pc, #44]	; (80005ac <__libc_init_array+0x40>)
 800057e:	4c0c      	ldr	r4, [pc, #48]	; (80005b0 <__libc_init_array+0x44>)
 8000580:	f000 f818 	bl	80005b4 <_init>
 8000584:	1b64      	subs	r4, r4, r5
 8000586:	10a4      	asrs	r4, r4, #2
 8000588:	2600      	movs	r6, #0
 800058a:	42a6      	cmp	r6, r4
 800058c:	d105      	bne.n	800059a <__libc_init_array+0x2e>
 800058e:	bd70      	pop	{r4, r5, r6, pc}
 8000590:	f855 3b04 	ldr.w	r3, [r5], #4
 8000594:	4798      	blx	r3
 8000596:	3601      	adds	r6, #1
 8000598:	e7ee      	b.n	8000578 <__libc_init_array+0xc>
 800059a:	f855 3b04 	ldr.w	r3, [r5], #4
 800059e:	4798      	blx	r3
 80005a0:	3601      	adds	r6, #1
 80005a2:	e7f2      	b.n	800058a <__libc_init_array+0x1e>
 80005a4:	080005fc 	.word	0x080005fc
 80005a8:	080005fc 	.word	0x080005fc
 80005ac:	080005fc 	.word	0x080005fc
 80005b0:	08000600 	.word	0x08000600

080005b4 <_init>:
 80005b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005b6:	bf00      	nop
 80005b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ba:	bc08      	pop	{r3}
 80005bc:	469e      	mov	lr, r3
 80005be:	4770      	bx	lr

080005c0 <_fini>:
 80005c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005c2:	bf00      	nop
 80005c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005c6:	bc08      	pop	{r3}
 80005c8:	469e      	mov	lr, r3
 80005ca:	4770      	bx	lr
