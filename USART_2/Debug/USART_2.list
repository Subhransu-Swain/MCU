
USART_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000244  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  080003dc  080003dc  000103dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080003e4  080003e4  000103ec  2**0
                  CONTENTS
  4 .ARM          00000000  080003e4  080003e4  000103ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003e4  080003ec  000103ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003e4  080003e4  000103e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003e8  080003e8  000103e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003ec  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003ec  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000103ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000009d4  00000000  00000000  0001041c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000026c  00000000  00000000  00010df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000090  00000000  00000000  00011060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000068  00000000  00000000  000110f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013b38  00000000  00000000  00011158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000ed1  00000000  00000000  00024c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f9e0  00000000  00000000  00025b61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a5541  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000144  00000000  00000000  000a5594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080003c4 	.word	0x080003c4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080003c4 	.word	0x080003c4

080001d8 <Sconfig_Init>:
 *      Author: anujm
 */

#include"main.h"
void Sconfig_Init()
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
	RCC->APB1ENR |=0X20000;
 80001dc:	4b18      	ldr	r3, [pc, #96]	; (8000240 <Sconfig_Init+0x68>)
 80001de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80001e0:	4a17      	ldr	r2, [pc, #92]	; (8000240 <Sconfig_Init+0x68>)
 80001e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001e6:	6413      	str	r3, [r2, #64]	; 0x40
	RCC->AHB1ENR |=0X1;
 80001e8:	4b15      	ldr	r3, [pc, #84]	; (8000240 <Sconfig_Init+0x68>)
 80001ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001ec:	4a14      	ldr	r2, [pc, #80]	; (8000240 <Sconfig_Init+0x68>)
 80001ee:	f043 0301 	orr.w	r3, r3, #1
 80001f2:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER |=0X20;
 80001f4:	4b13      	ldr	r3, [pc, #76]	; (8000244 <Sconfig_Init+0x6c>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a12      	ldr	r2, [pc, #72]	; (8000244 <Sconfig_Init+0x6c>)
 80001fa:	f043 0320 	orr.w	r3, r3, #32
 80001fe:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |=0X700;
 8000200:	4b10      	ldr	r3, [pc, #64]	; (8000244 <Sconfig_Init+0x6c>)
 8000202:	6a1b      	ldr	r3, [r3, #32]
 8000204:	4a0f      	ldr	r2, [pc, #60]	; (8000244 <Sconfig_Init+0x6c>)
 8000206:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800020a:	6213      	str	r3, [r2, #32]
	USART2->BRR |=0X683;   //9600 baudrate
 800020c:	4b0e      	ldr	r3, [pc, #56]	; (8000248 <Sconfig_Init+0x70>)
 800020e:	689b      	ldr	r3, [r3, #8]
 8000210:	4a0d      	ldr	r2, [pc, #52]	; (8000248 <Sconfig_Init+0x70>)
 8000212:	f443 63d0 	orr.w	r3, r3, #1664	; 0x680
 8000216:	f043 0303 	orr.w	r3, r3, #3
 800021a:	6093      	str	r3, [r2, #8]
	USART2->CR1 |=0X8;
 800021c:	4b0a      	ldr	r3, [pc, #40]	; (8000248 <Sconfig_Init+0x70>)
 800021e:	68db      	ldr	r3, [r3, #12]
 8000220:	4a09      	ldr	r2, [pc, #36]	; (8000248 <Sconfig_Init+0x70>)
 8000222:	f043 0308 	orr.w	r3, r3, #8
 8000226:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |=0X2000;
 8000228:	4b07      	ldr	r3, [pc, #28]	; (8000248 <Sconfig_Init+0x70>)
 800022a:	68db      	ldr	r3, [r3, #12]
 800022c:	4a06      	ldr	r2, [pc, #24]	; (8000248 <Sconfig_Init+0x70>)
 800022e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000232:	60d3      	str	r3, [r2, #12]

}
 8000234:	bf00      	nop
 8000236:	46bd      	mov	sp, r7
 8000238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	40023800 	.word	0x40023800
 8000244:	40020000 	.word	0x40020000
 8000248:	40004400 	.word	0x40004400

0800024c <USART2_Tx>:
void USART2_Tx(unsigned char data)
{
 800024c:	b480      	push	{r7}
 800024e:	b083      	sub	sp, #12
 8000250:	af00      	add	r7, sp, #0
 8000252:	4603      	mov	r3, r0
 8000254:	71fb      	strb	r3, [r7, #7]
	while(!(USART2->SR & 0x80)){}
 8000256:	bf00      	nop
 8000258:	4b08      	ldr	r3, [pc, #32]	; (800027c <USART2_Tx+0x30>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000260:	2b00      	cmp	r3, #0
 8000262:	d0f9      	beq.n	8000258 <USART2_Tx+0xc>
	USART2-> DR |=(data & 0xff);
 8000264:	4b05      	ldr	r3, [pc, #20]	; (800027c <USART2_Tx+0x30>)
 8000266:	685a      	ldr	r2, [r3, #4]
 8000268:	79fb      	ldrb	r3, [r7, #7]
 800026a:	4904      	ldr	r1, [pc, #16]	; (800027c <USART2_Tx+0x30>)
 800026c:	4313      	orrs	r3, r2
 800026e:	604b      	str	r3, [r1, #4]
}
 8000270:	bf00      	nop
 8000272:	370c      	adds	r7, #12
 8000274:	46bd      	mov	sp, r7
 8000276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027a:	4770      	bx	lr
 800027c:	40004400 	.word	0x40004400

08000280 <USART2_send>:

void USART2_send(unsigned char *str)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	while(*str)
 8000288:	e007      	b.n	800029a <USART2_send+0x1a>
	{
	USART2_Tx(*str);
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	4618      	mov	r0, r3
 8000290:	f7ff ffdc 	bl	800024c <USART2_Tx>
	str++;
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	3301      	adds	r3, #1
 8000298:	607b      	str	r3, [r7, #4]
	while(*str)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d1f3      	bne.n	800028a <USART2_send+0xa>
	}
}
 80002a2:	bf00      	nop
 80002a4:	bf00      	nop
 80002a6:	3708      	adds	r7, #8
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}

080002ac <delay>:

void delay(int T)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b085      	sub	sp, #20
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
	while(T--)
 80002b4:	e009      	b.n	80002ca <delay+0x1e>
	{
		for(int i=0;i<100000;i++);
 80002b6:	2300      	movs	r3, #0
 80002b8:	60fb      	str	r3, [r7, #12]
 80002ba:	e002      	b.n	80002c2 <delay+0x16>
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	3301      	adds	r3, #1
 80002c0:	60fb      	str	r3, [r7, #12]
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	4a07      	ldr	r2, [pc, #28]	; (80002e4 <delay+0x38>)
 80002c6:	4293      	cmp	r3, r2
 80002c8:	ddf8      	ble.n	80002bc <delay+0x10>
	while(T--)
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	1e5a      	subs	r2, r3, #1
 80002ce:	607a      	str	r2, [r7, #4]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d1f0      	bne.n	80002b6 <delay+0xa>

	}
}
 80002d4:	bf00      	nop
 80002d6:	bf00      	nop
 80002d8:	3714      	adds	r7, #20
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	0001869f 	.word	0x0001869f

080002e8 <main>:

int main()
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
	Sconfig_Init();
 80002ec:	f7ff ff74 	bl	80001d8 <Sconfig_Init>
	while(1)
	{
		USART2_send("Hello\t");
 80002f0:	4803      	ldr	r0, [pc, #12]	; (8000300 <main+0x18>)
 80002f2:	f7ff ffc5 	bl	8000280 <USART2_send>
//		USART2_send
//		USART2_Tx("hello");
	delay(10);
 80002f6:	200a      	movs	r0, #10
 80002f8:	f7ff ffd8 	bl	80002ac <delay>
		USART2_send("Hello\t");
 80002fc:	e7f8      	b.n	80002f0 <main+0x8>
 80002fe:	bf00      	nop
 8000300:	080003dc 	.word	0x080003dc

08000304 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000308:	4b06      	ldr	r3, [pc, #24]	; (8000324 <SystemInit+0x20>)
 800030a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800030e:	4a05      	ldr	r2, [pc, #20]	; (8000324 <SystemInit+0x20>)
 8000310:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000314:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000318:	bf00      	nop
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	e000ed00 	.word	0xe000ed00

08000328 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000328:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000360 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800032c:	480d      	ldr	r0, [pc, #52]	; (8000364 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800032e:	490e      	ldr	r1, [pc, #56]	; (8000368 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000330:	4a0e      	ldr	r2, [pc, #56]	; (800036c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000332:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000334:	e002      	b.n	800033c <LoopCopyDataInit>

08000336 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000336:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000338:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800033a:	3304      	adds	r3, #4

0800033c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800033c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800033e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000340:	d3f9      	bcc.n	8000336 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000342:	4a0b      	ldr	r2, [pc, #44]	; (8000370 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000344:	4c0b      	ldr	r4, [pc, #44]	; (8000374 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000346:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000348:	e001      	b.n	800034e <LoopFillZerobss>

0800034a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800034a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800034c:	3204      	adds	r2, #4

0800034e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800034e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000350:	d3fb      	bcc.n	800034a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000352:	f7ff ffd7 	bl	8000304 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000356:	f000 f811 	bl	800037c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800035a:	f7ff ffc5 	bl	80002e8 <main>
  bx  lr    
 800035e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000360:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000368:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800036c:	080003ec 	.word	0x080003ec
  ldr r2, =_sbss
 8000370:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000374:	2000001c 	.word	0x2000001c

08000378 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000378:	e7fe      	b.n	8000378 <ADC_IRQHandler>
	...

0800037c <__libc_init_array>:
 800037c:	b570      	push	{r4, r5, r6, lr}
 800037e:	4d0d      	ldr	r5, [pc, #52]	; (80003b4 <__libc_init_array+0x38>)
 8000380:	4c0d      	ldr	r4, [pc, #52]	; (80003b8 <__libc_init_array+0x3c>)
 8000382:	1b64      	subs	r4, r4, r5
 8000384:	10a4      	asrs	r4, r4, #2
 8000386:	2600      	movs	r6, #0
 8000388:	42a6      	cmp	r6, r4
 800038a:	d109      	bne.n	80003a0 <__libc_init_array+0x24>
 800038c:	4d0b      	ldr	r5, [pc, #44]	; (80003bc <__libc_init_array+0x40>)
 800038e:	4c0c      	ldr	r4, [pc, #48]	; (80003c0 <__libc_init_array+0x44>)
 8000390:	f000 f818 	bl	80003c4 <_init>
 8000394:	1b64      	subs	r4, r4, r5
 8000396:	10a4      	asrs	r4, r4, #2
 8000398:	2600      	movs	r6, #0
 800039a:	42a6      	cmp	r6, r4
 800039c:	d105      	bne.n	80003aa <__libc_init_array+0x2e>
 800039e:	bd70      	pop	{r4, r5, r6, pc}
 80003a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003a4:	4798      	blx	r3
 80003a6:	3601      	adds	r6, #1
 80003a8:	e7ee      	b.n	8000388 <__libc_init_array+0xc>
 80003aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ae:	4798      	blx	r3
 80003b0:	3601      	adds	r6, #1
 80003b2:	e7f2      	b.n	800039a <__libc_init_array+0x1e>
 80003b4:	080003e4 	.word	0x080003e4
 80003b8:	080003e4 	.word	0x080003e4
 80003bc:	080003e4 	.word	0x080003e4
 80003c0:	080003e8 	.word	0x080003e8

080003c4 <_init>:
 80003c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003c6:	bf00      	nop
 80003c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ca:	bc08      	pop	{r3}
 80003cc:	469e      	mov	lr, r3
 80003ce:	4770      	bx	lr

080003d0 <_fini>:
 80003d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003d2:	bf00      	nop
 80003d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003d6:	bc08      	pop	{r3}
 80003d8:	469e      	mov	lr, r3
 80003da:	4770      	bx	lr
