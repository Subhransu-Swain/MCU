
05_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003ac  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000544  0800054c  0001054c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000544  08000544  0001054c  2**0
                  CONTENTS
  4 .ARM          00000000  08000544  08000544  0001054c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000544  0800054c  0001054c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000544  08000544  00010544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000548  08000548  00010548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001054c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800054c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800054c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001054c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000bc0  00000000  00000000  0001057c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000335  00000000  00000000  0001113c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000e0  00000000  00000000  00011478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000a8  00000000  00000000  00011558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000021b6  00000000  00000000  00011600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001321  00000000  00000000  000137b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008a14  00000000  00000000  00014ad7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001d4eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000260  00000000  00000000  0001d53c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800052c 	.word	0x0800052c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	0800052c 	.word	0x0800052c

080001d8 <gpio_config>:
 *      Author: PHY202209EF10
 */
#include <stdint.h>
#include <stdio.h>
#include"stm32f411x.h"
void gpio_config(){
 80001d8:	b580      	push	{r7, lr}
 80001da:	b084      	sub	sp, #16
 80001dc:	af00      	add	r7, sp, #0
GPIO_Handle_t GpioLed;

		GpioLed.pGPIOx = GPIOA;
 80001de:	4b0c      	ldr	r3, [pc, #48]	; (8000210 <gpio_config+0x38>)
 80001e0:	607b      	str	r3, [r7, #4]
		GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 80001e2:	2305      	movs	r3, #5
 80001e4:	723b      	strb	r3, [r7, #8]
		GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80001e6:	2301      	movs	r3, #1
 80001e8:	727b      	strb	r3, [r7, #9]
		GpioLed.GPIO_PinConfig.GPIO_PinSpeed= GPIO_SPEED_LOW;
 80001ea:	2300      	movs	r3, #0
 80001ec:	72bb      	strb	r3, [r7, #10]
		GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80001ee:	2300      	movs	r3, #0
 80001f0:	733b      	strb	r3, [r7, #12]
		GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80001f2:	2300      	movs	r3, #0
 80001f4:	72fb      	strb	r3, [r7, #11]

		Gpio_PerClkEnable(GPIOA , ENABLE);
 80001f6:	2101      	movs	r1, #1
 80001f8:	4805      	ldr	r0, [pc, #20]	; (8000210 <gpio_config+0x38>)
 80001fa:	f000 f88d 	bl	8000318 <Gpio_PerClkEnable>

		Gpio_Init(&GpioLed);
 80001fe:	1d3b      	adds	r3, r7, #4
 8000200:	4618      	mov	r0, r3
 8000202:	f000 f8e7 	bl	80003d4 <Gpio_Init>
}
 8000206:	bf00      	nop
 8000208:	3710      	adds	r7, #16
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}
 800020e:	bf00      	nop
 8000210:	40020000 	.word	0x40020000

08000214 <led_init>:
{
	while(T--){
	for(uint32_t i = 0; i < 500000; i ++); }
}
void led_init()
{
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= 0x1;
 8000218:	4b08      	ldr	r3, [pc, #32]	; (800023c <led_init+0x28>)
 800021a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800021c:	4a07      	ldr	r2, [pc, #28]	; (800023c <led_init+0x28>)
 800021e:	f043 0301 	orr.w	r3, r3, #1
 8000222:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER |= 0x400;
 8000224:	4b06      	ldr	r3, [pc, #24]	; (8000240 <led_init+0x2c>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a05      	ldr	r2, [pc, #20]	; (8000240 <led_init+0x2c>)
 800022a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800022e:	6013      	str	r3, [r2, #0]
}
 8000230:	bf00      	nop
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	40023800 	.word	0x40023800
 8000240:	40020000 	.word	0x40020000

08000244 <sw_init>:
void sw_init()
{
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= 0x4;
 8000248:	4b07      	ldr	r3, [pc, #28]	; (8000268 <sw_init+0x24>)
 800024a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800024c:	4a06      	ldr	r2, [pc, #24]	; (8000268 <sw_init+0x24>)
 800024e:	f043 0304 	orr.w	r3, r3, #4
 8000252:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOC->MODER |= 0x0;
 8000254:	4b05      	ldr	r3, [pc, #20]	; (800026c <sw_init+0x28>)
 8000256:	4a05      	ldr	r2, [pc, #20]	; (800026c <sw_init+0x28>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	6013      	str	r3, [r2, #0]
}
 800025c:	bf00      	nop
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	40023800 	.word	0x40023800
 800026c:	40020800 	.word	0x40020800

08000270 <operation>:
void operation()
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
	if(GPIOC->IDR & 0x2000)
 8000274:	4b0b      	ldr	r3, [pc, #44]	; (80002a4 <operation+0x34>)
 8000276:	691b      	ldr	r3, [r3, #16]
 8000278:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800027c:	2b00      	cmp	r3, #0
 800027e:	d006      	beq.n	800028e <operation+0x1e>
	{
		GPIOA->BSRR |= 0x200000;
 8000280:	4b09      	ldr	r3, [pc, #36]	; (80002a8 <operation+0x38>)
 8000282:	699b      	ldr	r3, [r3, #24]
 8000284:	4a08      	ldr	r2, [pc, #32]	; (80002a8 <operation+0x38>)
 8000286:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800028a:	6193      	str	r3, [r2, #24]
	}
	else
	{
		GPIOA->BSRR |= 0x20;
	}
}
 800028c:	e005      	b.n	800029a <operation+0x2a>
		GPIOA->BSRR |= 0x20;
 800028e:	4b06      	ldr	r3, [pc, #24]	; (80002a8 <operation+0x38>)
 8000290:	699b      	ldr	r3, [r3, #24]
 8000292:	4a05      	ldr	r2, [pc, #20]	; (80002a8 <operation+0x38>)
 8000294:	f043 0320 	orr.w	r3, r3, #32
 8000298:	6193      	str	r3, [r2, #24]
}
 800029a:	bf00      	nop
 800029c:	46bd      	mov	sp, r7
 800029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a2:	4770      	bx	lr
 80002a4:	40020800 	.word	0x40020800
 80002a8:	40020000 	.word	0x40020000

080002ac <main>:

int main(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
//	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
//
//	Gpio_PerClkEnable(GPIOA , ENABLE);
//
//	Gpio_Init(&GpioLed);
	gpio_config();
 80002b0:	f7ff ff92 	bl	80001d8 <gpio_config>
	led_init();
 80002b4:	f7ff ffae 	bl	8000214 <led_init>
	sw_init();
 80002b8:	f7ff ffc4 	bl	8000244 <sw_init>
//		Gpio_Toggle_pin(GPIOA, GPIO_PIN_NO_5);
//		delay(1000);
//		printf("LED ON\n");


		operation();
 80002bc:	f7ff ffd8 	bl	8000270 <operation>
 80002c0:	e7fc      	b.n	80002bc <main+0x10>
	...

080002c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002c4:	480d      	ldr	r0, [pc, #52]	; (80002fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002c8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002cc:	480c      	ldr	r0, [pc, #48]	; (8000300 <LoopForever+0x6>)
  ldr r1, =_edata
 80002ce:	490d      	ldr	r1, [pc, #52]	; (8000304 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002d0:	4a0d      	ldr	r2, [pc, #52]	; (8000308 <LoopForever+0xe>)
  movs r3, #0
 80002d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002d4:	e002      	b.n	80002dc <LoopCopyDataInit>

080002d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002da:	3304      	adds	r3, #4

080002dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002e0:	d3f9      	bcc.n	80002d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002e2:	4a0a      	ldr	r2, [pc, #40]	; (800030c <LoopForever+0x12>)
  ldr r4, =_ebss
 80002e4:	4c0a      	ldr	r4, [pc, #40]	; (8000310 <LoopForever+0x16>)
  movs r3, #0
 80002e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002e8:	e001      	b.n	80002ee <LoopFillZerobss>

080002ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002ec:	3204      	adds	r2, #4

080002ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002f0:	d3fb      	bcc.n	80002ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002f2:	f000 f8f7 	bl	80004e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002f6:	f7ff ffd9 	bl	80002ac <main>

080002fa <LoopForever>:

LoopForever:
    b LoopForever
 80002fa:	e7fe      	b.n	80002fa <LoopForever>
  ldr   r0, =_estack
 80002fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000300:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000304:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000308:	0800054c 	.word	0x0800054c
  ldr r2, =_sbss
 800030c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000310:	2000001c 	.word	0x2000001c

08000314 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000314:	e7fe      	b.n	8000314 <ADC_IRQHandler>
	...

08000318 <Gpio_PerClkEnable>:
#include "stm32f411x_driver_gpio.h"

//GPIO_Peripheral Clock Control()/

void Gpio_PerClkEnable(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	460b      	mov	r3, r1
 8000322:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000324:	78fb      	ldrb	r3, [r7, #3]
 8000326:	2b01      	cmp	r3, #1
 8000328:	d140      	bne.n	80003ac <Gpio_PerClkEnable+0x94>
	{
		if(pGPIOx == GPIOA)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4a22      	ldr	r2, [pc, #136]	; (80003b8 <Gpio_PerClkEnable+0xa0>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d106      	bne.n	8000340 <Gpio_PerClkEnable+0x28>
		{
			GPIOA_PLCK_EN();
 8000332:	4b22      	ldr	r3, [pc, #136]	; (80003bc <Gpio_PerClkEnable+0xa4>)
 8000334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000336:	4a21      	ldr	r2, [pc, #132]	; (80003bc <Gpio_PerClkEnable+0xa4>)
 8000338:	f043 0301 	orr.w	r3, r3, #1
 800033c:	6313      	str	r3, [r2, #48]	; 0x30
	}
	else
	{
		//TODO
	}
}
 800033e:	e035      	b.n	80003ac <Gpio_PerClkEnable+0x94>
		else if(pGPIOx == GPIOB)
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	4a1f      	ldr	r2, [pc, #124]	; (80003c0 <Gpio_PerClkEnable+0xa8>)
 8000344:	4293      	cmp	r3, r2
 8000346:	d106      	bne.n	8000356 <Gpio_PerClkEnable+0x3e>
			GPIOB_PLCK_EN();
 8000348:	4b1c      	ldr	r3, [pc, #112]	; (80003bc <Gpio_PerClkEnable+0xa4>)
 800034a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034c:	4a1b      	ldr	r2, [pc, #108]	; (80003bc <Gpio_PerClkEnable+0xa4>)
 800034e:	f043 0302 	orr.w	r3, r3, #2
 8000352:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000354:	e02a      	b.n	80003ac <Gpio_PerClkEnable+0x94>
		else if(pGPIOx == GPIOC)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	4a1a      	ldr	r2, [pc, #104]	; (80003c4 <Gpio_PerClkEnable+0xac>)
 800035a:	4293      	cmp	r3, r2
 800035c:	d106      	bne.n	800036c <Gpio_PerClkEnable+0x54>
			GPIOC_PLCK_EN();
 800035e:	4b17      	ldr	r3, [pc, #92]	; (80003bc <Gpio_PerClkEnable+0xa4>)
 8000360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000362:	4a16      	ldr	r2, [pc, #88]	; (80003bc <Gpio_PerClkEnable+0xa4>)
 8000364:	f043 0304 	orr.w	r3, r3, #4
 8000368:	6313      	str	r3, [r2, #48]	; 0x30
}
 800036a:	e01f      	b.n	80003ac <Gpio_PerClkEnable+0x94>
		else if(pGPIOx == GPIOD)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	4a16      	ldr	r2, [pc, #88]	; (80003c8 <Gpio_PerClkEnable+0xb0>)
 8000370:	4293      	cmp	r3, r2
 8000372:	d106      	bne.n	8000382 <Gpio_PerClkEnable+0x6a>
			GPIOD_PLCK_EN();
 8000374:	4b11      	ldr	r3, [pc, #68]	; (80003bc <Gpio_PerClkEnable+0xa4>)
 8000376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000378:	4a10      	ldr	r2, [pc, #64]	; (80003bc <Gpio_PerClkEnable+0xa4>)
 800037a:	f043 0308 	orr.w	r3, r3, #8
 800037e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000380:	e014      	b.n	80003ac <Gpio_PerClkEnable+0x94>
		else if(pGPIOx == GPIOE)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	4a11      	ldr	r2, [pc, #68]	; (80003cc <Gpio_PerClkEnable+0xb4>)
 8000386:	4293      	cmp	r3, r2
 8000388:	d106      	bne.n	8000398 <Gpio_PerClkEnable+0x80>
			GPIOE_PLCK_EN();
 800038a:	4b0c      	ldr	r3, [pc, #48]	; (80003bc <Gpio_PerClkEnable+0xa4>)
 800038c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800038e:	4a0b      	ldr	r2, [pc, #44]	; (80003bc <Gpio_PerClkEnable+0xa4>)
 8000390:	f043 0310 	orr.w	r3, r3, #16
 8000394:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000396:	e009      	b.n	80003ac <Gpio_PerClkEnable+0x94>
		else if(pGPIOx == GPIOH)
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	4a0d      	ldr	r2, [pc, #52]	; (80003d0 <Gpio_PerClkEnable+0xb8>)
 800039c:	4293      	cmp	r3, r2
 800039e:	d105      	bne.n	80003ac <Gpio_PerClkEnable+0x94>
			GPIOH_PLCK_EN();
 80003a0:	4b06      	ldr	r3, [pc, #24]	; (80003bc <Gpio_PerClkEnable+0xa4>)
 80003a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a4:	4a05      	ldr	r2, [pc, #20]	; (80003bc <Gpio_PerClkEnable+0xa4>)
 80003a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003aa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ac:	bf00      	nop
 80003ae:	370c      	adds	r7, #12
 80003b0:	46bd      	mov	sp, r7
 80003b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b6:	4770      	bx	lr
 80003b8:	40020000 	.word	0x40020000
 80003bc:	40023800 	.word	0x40023800
 80003c0:	40020400 	.word	0x40020400
 80003c4:	40020800 	.word	0x40020800
 80003c8:	40020c00 	.word	0x40020c00
 80003cc:	40021000 	.word	0x40021000
 80003d0:	40021c00 	.word	0x40021c00

080003d4 <Gpio_Init>:

//GPIO_Init(){}/

void Gpio_Init(GPIO_Handle_t *pGPIOHandle)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b084      	sub	sp, #16
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
	uint32_t temp =0;  //temp. register
 80003dc:	2300      	movs	r3, #0
 80003de:	60fb      	str	r3, [r7, #12]

	//enable the peripheral clock

	Gpio_PerClkEnable(pGPIOHandle->pGPIOx, ENABLE);
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	2101      	movs	r1, #1
 80003e6:	4618      	mov	r0, r3
 80003e8:	f7ff ff96 	bl	8000318 <Gpio_PerClkEnable>

	//1. CONFIGURE THE MODE OF GPIO PIN

	if(pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	795b      	ldrb	r3, [r3, #5]
 80003f0:	2b03      	cmp	r3, #3
 80003f2:	d810      	bhi.n	8000416 <Gpio_Init+0x42>
	{
		//THE NON INTERRUPT MODE
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	795b      	ldrb	r3, [r3, #5]
 80003f8:	461a      	mov	r2, r3
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	791b      	ldrb	r3, [r3, #4]
 80003fe:	005b      	lsls	r3, r3, #1
 8000400:	fa02 f303 	lsl.w	r3, r2, r3
 8000404:	60fb      	str	r3, [r7, #12]
		//pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //Clearing a pin bits
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	6819      	ldr	r1, [r3, #0]
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	68fa      	ldr	r2, [r7, #12]
 8000412:	430a      	orrs	r2, r1
 8000414:	601a      	str	r2, [r3, #0]
	else
	{
		//LATER WILL IMPLEMENT THE IQR PART/
	}

	temp =0;
 8000416:	2300      	movs	r3, #0
 8000418:	60fb      	str	r3, [r7, #12]

	//2.Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed <<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	799b      	ldrb	r3, [r3, #6]
 800041e:	461a      	mov	r2, r3
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	791b      	ldrb	r3, [r3, #4]
 8000424:	005b      	lsls	r3, r3, #1
 8000426:	fa02 f303 	lsl.w	r3, r2, r3
 800042a:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //Clearing a pin bits
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	689a      	ldr	r2, [r3, #8]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	791b      	ldrb	r3, [r3, #4]
 8000436:	005b      	lsls	r3, r3, #1
 8000438:	2103      	movs	r1, #3
 800043a:	fa01 f303 	lsl.w	r3, r1, r3
 800043e:	43db      	mvns	r3, r3
 8000440:	4619      	mov	r1, r3
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	400a      	ands	r2, r1
 8000448:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;  //Pin Mode Setting
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	6899      	ldr	r1, [r3, #8]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	68fa      	ldr	r2, [r7, #12]
 8000456:	430a      	orrs	r2, r1
 8000458:	609a      	str	r2, [r3, #8]

	temp =0;
 800045a:	2300      	movs	r3, #0
 800045c:	60fb      	str	r3, [r7, #12]
	//3.Configure the PUPD Setting
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl <<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	79db      	ldrb	r3, [r3, #7]
 8000462:	461a      	mov	r2, r3
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	791b      	ldrb	r3, [r3, #4]
 8000468:	005b      	lsls	r3, r3, #1
 800046a:	fa02 f303 	lsl.w	r3, r2, r3
 800046e:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //Clearing a pin bits
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	68da      	ldr	r2, [r3, #12]
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	791b      	ldrb	r3, [r3, #4]
 800047a:	005b      	lsls	r3, r3, #1
 800047c:	2103      	movs	r1, #3
 800047e:	fa01 f303 	lsl.w	r3, r1, r3
 8000482:	43db      	mvns	r3, r3
 8000484:	4619      	mov	r1, r3
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	400a      	ands	r2, r1
 800048c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;  //Pin Mode Setting
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	68d9      	ldr	r1, [r3, #12]
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	68fa      	ldr	r2, [r7, #12]
 800049a:	430a      	orrs	r2, r1
 800049c:	60da      	str	r2, [r3, #12]

	//4.Configure the otype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType <<(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	7a1b      	ldrb	r3, [r3, #8]
 80004a2:	461a      	mov	r2, r3
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	791b      	ldrb	r3, [r3, #4]
 80004a8:	fa02 f303 	lsl.w	r3, r2, r3
 80004ac:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //Clearing a pin bits
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	685a      	ldr	r2, [r3, #4]
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	791b      	ldrb	r3, [r3, #4]
 80004b8:	4619      	mov	r1, r3
 80004ba:	2301      	movs	r3, #1
 80004bc:	408b      	lsls	r3, r1
 80004be:	43db      	mvns	r3, r3
 80004c0:	4619      	mov	r1, r3
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	400a      	ands	r2, r1
 80004c8:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;  //Pin Mode Setting
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	6859      	ldr	r1, [r3, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	68fa      	ldr	r2, [r7, #12]
 80004d6:	430a      	orrs	r2, r1
 80004d8:	605a      	str	r2, [r3, #4]


}
 80004da:	bf00      	nop
 80004dc:	3710      	adds	r7, #16
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
	...

080004e4 <__libc_init_array>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	4d0d      	ldr	r5, [pc, #52]	; (800051c <__libc_init_array+0x38>)
 80004e8:	4c0d      	ldr	r4, [pc, #52]	; (8000520 <__libc_init_array+0x3c>)
 80004ea:	1b64      	subs	r4, r4, r5
 80004ec:	10a4      	asrs	r4, r4, #2
 80004ee:	2600      	movs	r6, #0
 80004f0:	42a6      	cmp	r6, r4
 80004f2:	d109      	bne.n	8000508 <__libc_init_array+0x24>
 80004f4:	4d0b      	ldr	r5, [pc, #44]	; (8000524 <__libc_init_array+0x40>)
 80004f6:	4c0c      	ldr	r4, [pc, #48]	; (8000528 <__libc_init_array+0x44>)
 80004f8:	f000 f818 	bl	800052c <_init>
 80004fc:	1b64      	subs	r4, r4, r5
 80004fe:	10a4      	asrs	r4, r4, #2
 8000500:	2600      	movs	r6, #0
 8000502:	42a6      	cmp	r6, r4
 8000504:	d105      	bne.n	8000512 <__libc_init_array+0x2e>
 8000506:	bd70      	pop	{r4, r5, r6, pc}
 8000508:	f855 3b04 	ldr.w	r3, [r5], #4
 800050c:	4798      	blx	r3
 800050e:	3601      	adds	r6, #1
 8000510:	e7ee      	b.n	80004f0 <__libc_init_array+0xc>
 8000512:	f855 3b04 	ldr.w	r3, [r5], #4
 8000516:	4798      	blx	r3
 8000518:	3601      	adds	r6, #1
 800051a:	e7f2      	b.n	8000502 <__libc_init_array+0x1e>
 800051c:	08000544 	.word	0x08000544
 8000520:	08000544 	.word	0x08000544
 8000524:	08000544 	.word	0x08000544
 8000528:	08000548 	.word	0x08000548

0800052c <_init>:
 800052c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800052e:	bf00      	nop
 8000530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000532:	bc08      	pop	{r3}
 8000534:	469e      	mov	lr, r3
 8000536:	4770      	bx	lr

08000538 <_fini>:
 8000538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800053a:	bf00      	nop
 800053c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800053e:	bc08      	pop	{r3}
 8000540:	469e      	mov	lr, r3
 8000542:	4770      	bx	lr
